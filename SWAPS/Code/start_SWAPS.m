
clear
clc
close all
warning off
addpath('./functions')

home = pwd();

opt = start_menu();

switch opt
    
    case 'Create synthetic file and plot curves'     

        create_report()
        uiwait(msgbox('Report created', 'Info')); 
        multi_plot_win_bis(folder);

    % case 'Plot Project'

        %  multi_plot_win()
        
            
case 'Start Analysis with SWAPS'
       
% Main GUI window 
mainFig = figure('Name','SWAPS software', ...
    'Units','normalized', ...
    'Position', [0.003, 0.064, 0.994, 0.892], ...
    'Color', [.95 .95 .95], ...
     'MenuBar', 'none', ...
     'ToolBar', 'none', ...
     'NumberTitle', 'off');
     

% GUI title 
mainFig_title = annotation(mainFig, ...
    'textbox','String', ...
    ' SWAPS (v1.0.1) - Two-stations Dispersion Analysis', ...
    'FontSize',18, ...
    'FontWeight','bold', ...
    'FontName','Calibri', ...
    'HorizontalAlignment','center', ...
    'EdgeColor', 'none', ...
    'Position', [0.1 0.94 0.45 0.05]);


% university logo
ax_unisi = axes(mainFig, ...
    'Position', [0.06, 0.935, 0.1, 0.06]);
logo = 'LOGO_SWAPS.png';
imgData = imread(logo);
image(ax_unisi, imgData);
ax_unisi.XTickLabel = [];
ax_unisi.YTickLabel = [];
% axis(ax_unisi, 'off');

analysis = true; % flag for repeat analysis 
num = 0;


%%
while analysis
%% 

num = num +1; % if num>1, analysis is about to be repeated, update panels 
if num > 1
    delete(panel_group)
    delete(panel_phase)
    delete(axcoh)
    delete(axcor)
    delete(panel_set)
    delete(panel_picking)
    delete(panel_vg)
    delete(panel_ftan)
end

% flag to be able to perform subsequent analysis if everything is in order
mainFig.UserData.go = true;


% Main panel for dispersion analysis  
panel_group = uipanel(mainFig, ...
    'Title','Group Dispersion Analysis ', ...
    'Units','normalized', ...
    'Position',[0.57, 0.09, 0.42, 0.9], ...
    'BackgroundColor', [1 1 1], ...
    'FontSize',12, ...
    'FontName','Calibri');


% secondary panel for dispersion curve plot %
panel_phase = uipanel(mainFig, 'Title', ...
    'Phase Dispersion Analysis ', ...
    'Units','normalized', ...
    'Position', [0.03 0.45 0.52 0.48], ... 
    'BackgroundColor',[1 1 1], ...
    'FontSize',12, ...
    'FontName', 'Calibri'); 
    

% axis for phase dispersion analysis
ax = uiaxes(panel_phase, ...
    'Units', 'normalized', ...
    'Position', [0.01 0.02 0.96 0.98]); 

ax.XLabel.String = 'Frequency [Hz]'; 
ax.YLabel.String = 'Phase Velocity [m/s]'; 
ax.FontName = 'Calibri';
ax.FontSize = 12; 
ax.Box = 'on'; 
ax.Color = [1 1 1];


% axis for group dispersion analysis
ax1 = axes('Parent', panel_group, ...
    'Units', 'normalized', ...
    'Position', [0.09, 0.7, 0.87, 0.29]);
ax2 = axes('Parent', panel_group, ...
    'Units', 'normalized', ...
    'Position', [0.09 0.38 0.87 0.29]);
ax3 = axes('Parent', panel_group, ...
    'Units', 'normalized', ...
    'Position', [0.09 0.06 0.87 0.29]);

ax1.Color = [1 1 1]; ax2.Color = [1 1 1]; ax3.Color = [1 1 1];
ax1.Box = 'on'; ax2.Box = 'on';ax3.Box = 'on';    
ax1.XTick = [];
ax2.XTick = [];
ax1.YLabel.String = 'Group Velocity [m/s]';
ax2.YLabel.String = 'Group Velocity [m/s]'; 
ax3.YLabel.String = 'Group Velocity [m/s]';
ax3.XLabel.String = 'Frequency [Hz]';
ax1.FontName = 'Calibri';
ax2.FontName = 'Calibri';
ax3.FontName = 'Calibri';
  

% axis for plot of the stacked ccf function
axcor = uiaxes(mainFig, ...
    'Units', 'normalized', ...
    'Position', [0.03 0.08 0.26 0.15]); 

axcor.Box = 'on';       
axcor.XLabel.String = 'time lag [s]'; 
axcor.FontName = 'Calibri';
axcor.FontSize = 12; 
axcor.XGrid = 'on'; 
axcor.YGrid = 'on'; 
title(axcor, 'cross-correlation function');
% axis for plot of the stacked coherence function                
axcoh = uiaxes(mainFig, ...
    'Units', 'normalized', ...
    'Position',  [0.295 0.08 0.26 0.15]); 

axcoh.Box = 'on';      
axcoh.XLabel.String = 'Frequency [Hz]'; 
axcoh.FontName = 'Calibri';
axcoh.FontSize = 12; 
axcoh.XGrid = 'on'; 
axcoh.YGrid = 'on'; 
title(axcoh, 'coherence function');

% panel for main program buttons
control_panel = uipanel(mainFig, ...
    'Title', '   ', ...
    'Units','normalized', ...
    'Position', [0.03 0.01 0.18 0.06], ... 
    'BackgroundColor',[.95 .95 .95], ...
    'FontSize',12, ...
    'FontName', 'Calibri', ...
    'BorderType','none'); 


% call function for select traces
btn_tr = uicontrol(control_panel, ...
    'Style', 'pushbutton', ...
    'String', 'Select Input', ...
    'Units', 'normalized', ...
    'Position', [0.55 0.1 0.4 0.8], ...
    'Callback', @(src, event) buttonPress(mainFig));

closeBtn = uicontrol(control_panel, ...
    'Style', 'pushbutton', ...
    'String', 'Close all', ...
    'Units', 'normalized', ...
    'Position', [0.05 0.1 0.4 0.8], ...
    'Callback', @(src, event) close_window(mainFig));




uiwait(mainFig);

% main cycle to import stations and traces file
input_sta = []; % preallocate input station file
input_sig = []; % preallocate input traces file
if isvalid(mainFig) % check existence of the main GUI
    [input_sta, ~] = uigetfile({'*.*','Tutti i file'}, 'Select station file');
    [input_sig, ~] = uigetfile({'*.*','Tutti i file'}, 'Select file with traces');
    while isempty(input_sta) || isempty(input_sig)
        [input_sta, ~] = uigetfile({'*.*','Tutti i file'}, 'Select station file');
        [input_sig, ~] = uigetfile({'*.*','Tutti i file'}, 'Select file with traces');       
        msgbox('Ensure to correct import stations and traces input files', 'Warning', 'modal');
    end
    [nrec,receiv,idx] = select_data_new(input_sig, input_sta);
    delete(btn_tr)
    [sig,xsta,ysta] = import_sig_sta_new(input_sig, input_sta,idx,fs);
    while isempty(ti_win) || isempty(tf_win)
        uiwait(errordlg('No windows selected, try again', 'Warning'));
        [sig,xsta,ysta] = import_sig_sta_new(input_sig, input_sta,idx,fs);
    end
end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% ---------- start of the main loop over the receivers -------------- %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

if exist('nrec','var') && nrec == 2  %  TWO-STATIONS RUN
    

    ns1 = 1;
    ns2 = 2;    
    n1 = idx(ns1);
    n2 = idx(ns2);
    
    synt = false; % flag for synthetic group curve calculation
    fit = false; % flag for manual or automatic picking
    
    % inter-station distance
    r = sqrt( (xsta(ns1)-xsta(ns2))^2 + (ysta(ns1)-ysta(ns2))^2 ); 
   
    % select frequency and velocity limits
    create_frequency_window(); 


    % compute stacked cross-correlation and coherence functions
    cross_cohe(sig(:,ns1), ...
               sig(:,ns2), ... 
               ti_win, ...
               tf_win, ...
               fs, ...
               w, ...
               end_frequency, ...
               axcoh, ...
               idx, ...
               axcor);          


    % panel for setting phase dispersion analysis parameters
    panel_set = uipanel(mainFig, ...
        'Title', 'Setting phase analysis parameters ', ...
        'Units','normalized', ...
        'Position', [0.03 0.24 0.35 0.2], ... 
        'BackgroundColor',[.9 .9 .9], ...
        'FontName','Calibri', ...
        'FontSize',12); 


    % set width of the frequency window for coherence function 
    winLabel = uicontrol(panel_set, ...
        'Style', 'text', ...
        'String', 'Window Width (Hz)', ...
        'Units','Normalized','Position', [0.01 0.6 0.25 0.2], ... 
        'FontSize', 10, ...
        'FontName', 'Calibri', ...
        'BackgroundColor',[.9 .9 .9]);
 
    winInput = uicontrol(panel_set, ...
        'Style', 'edit', ...
        'String', '2', ...
        'Units','Normalized', ...
        'Position', [0.25 0.625 0.08 0.2], ... 
        'FontSize', 10, ...
        'FontName', 'Calibri');


    % set shift of the frequency window for coherence function 
    stepLabel = uicontrol(panel_set, ...
        'Style', 'text', ...
        'String', 'Step-size (Hz)', ...
        'Units','Normalized', ...
        'Position', [0.34 0.6 0.22 0.2], ...
        'FontSize', 10, ...
        'FontName', 'Calibri', ...
        'BackgroundColor',[.9 .9 .9]);
    
    stepInput = uicontrol(panel_set, ...
        'Style', 'edit', ...
        'String', '2', ...
        'Units','Normalized', ...
        'Position', [0.53 0.625 0.08 0.2], ...
        'FontSize', 10, ...
        'FontName', 'Calibri');


    % set linear coefficient for correlation
    k1Label = uicontrol(panel_set, ...
        'Style', 'text', ...
        'String', 'k1', ...
        'Units','Normalized', ...
        'Position', [0.63 0.6 0.1 0.2], ...
        'FontSize', 10, ...
        'FontName', 'Calibri', ...
        'BackgroundColor',[.9 .9 .9]); 

    k1Input = uicontrol(panel_set, ...
        'Style', 'edit', ...
        'String', '0.5', ...
        'Units','Normalized', ...
        'Position', [0.71 0.625 0.08 0.2], ...
        'FontSize', 10, ...
        'FontName', 'Calibri');

    
    % set linear coefficient for rmse
    k2Label = uicontrol(panel_set, ...
        'Style', 'text', ...
        'String', 'k2', ...
        'Units','Normalized', ...
        'Position', [0.81 0.6 0.1 0.2], ...
        'FontSize', 10, ...
        'FontName', 'Calibri', ...
        'BackgroundColor',[.9 .9 .9]);

    k2Input = uicontrol(panel_set, ...
        'Style', 'edit', ...
        'String', '0.5', ...
        'Units', 'Normalized', ...
        'Position', [0.89 0.625 0.08 0.2], ...
        'FontSize', 10, ...
        'FontName', 'Calibri');


    % button for evaluate fit between coherence and Bessel function
    btn_fit = uicontrol(panel_set, ...
        'Style', 'pushbutton', ...
        'String', 'Evaluate fit', ...
        'Units', 'normalized', ...
        'Position', [0.3 0.15 0.4 0.3], ...          
        'Callback', @(src, event) ...
        space_corr_win_2(corr, ...
                         freq, ...
                         lb, ...
                         ub, ...
                         start_frequency, ...
                         end_frequency, ...
                         w, ...
                         fs, ... 
                         str2double(get(stepInput, 'string')), ...
                         r, ...
                         str2double(get(winInput, 'string')), ...
                         ax, ...
                         str2double(get(k1Input, 'string')), ...
                         str2double(get(k2Input, 'string'))));


    % panel for manual or automatc picking of phase dispersion curve
    panel_picking = uipanel(mainFig, ...
        'Title', 'Picking Phase curve ', ...
        'Units', 'normalized', ...
        'Position', [0.39, 0.35, 0.16, 0.09], ...
        'BackgroundColor', [.9 .9 .9], ...
        'FontName','Calibri', ...
        'FontSize', 10);
    

    % panel for the plot of the synthetic group dispersion curve 
    panel_vg = uipanel(mainFig, ...
        'Title', 'Plot synthetic group curve ', ...
        'Units', 'normalized', ...
        'Position', [0.39, 0.24, 0.16, 0.09], ...
        'BackgroundColor', [.9 .9 .9], ...
        'FontName','Calibri', ...
        'FontSize', 10);

    % button for automatic picking pf phase dispersion curve
    btn_auto = uicontrol(panel_picking, ...
        'Style', 'pushbutton', ...
        'String', 'Automatic', ...
        'Units', 'normalized', ...
        'Position', [0.05 0.2 0.4 0.6], ...
        'Callback', @(src, event) ...
        auto_pick(mainFig, ...
                  ax, ...
                  lb:ub, ...
                  'correlation', ...
                  nrec, ...
                  start_frequency, ...
                  end_frequency));
    
    % button for manual picking pf phase dispersion curve
    btn_man = uicontrol(panel_picking, ...
        'Style', 'pushbutton', ...
        'String', 'Manual', ...
        'Units', 'normalized', ...
        'Position', [0.55 0.2 0.4 0.6], ...
        'Callback', @(src, event) getPick(lb, ub, mainFig, ax));

    % button for plot synthetic group velocities
    btn_snt = uicontrol(panel_vg, ...
        'Style', 'pushbutton', ...
        'String', ' Plot ', ...
        'Units', 'normalized', ...
        'Position', [0.2 0.1 0.6 0.7], ...
        'Callback', @(src, event) plot_synt(mainFig, ax1, ax2, ax3));


    %%



    % panel for setting group dispersion analysis parameters
    panel_ftan = uipanel(mainFig, ...
        'Title', 'FTAN analysis', ...
        'Units', 'normalized', ...
        'Position', [0.57, 0.01, 0.42, 0.08], ...
        'BackgroundColor',[.9 .9 .9], ...
        'FontSize', 12, ...
        'FontName', 'Calibri');


    % Set initial standard deviation for gaussian filter
    sdiLabel = uicontrol(panel_ftan, ...
        'Style', 'text', ...
        'String', 'Initial sigma (Hz)', ...
        'Units', 'Normalized', ...
        'Position', [0.02 0.1 0.15 0.6], ...
        'FontSize', 10, ...
        'FontName', 'Calibri', ...
        'BackgroundColor',[.9 .9 .9]);
    
    sdiInput = uicontrol(panel_ftan, ...
        'Style', 'edit', ...
        'String', '1', ...
        'Units', 'Normalized', ...
        'Position', [0.18 0.27 0.05 0.5], ...
        'FontSize', 10, ...
        'FontName', 'Calibri');
    
    
    % Set final standard deviation for gaussian filter
    sdfLabel = uicontrol(panel_ftan, ...
        'Style', 'text', ...
        'String', 'Final sigma (Hz)', ...
        'Units', 'Normalized', ...
        'Position', [0.26 0.1 0.15 0.6], ...
        'FontSize', 10, ...
        'FontName', 'Calibri', ...
        'BackgroundColor',[.9 .9 .9]);
    
    sdfInput = uicontrol(panel_ftan, ...
        'Style', 'edit', ...
        'String', '5', ...
        'Units', 'Normalized', ...
        'Position', [0.42 0.27 0.05 0.5], ...
        'FontSize', 10, ...
        'FontName', 'Calibri');
    
    
    % Frequency-step of the gaussian filter
    fstepLabel = uicontrol(panel_ftan, ...
        'Style', 'text', ...
        'String', 'Step (Hz)', ...
        'Units', 'Normalized', ...
        'Position', [0.48 0.1 0.12 0.6], ...
        'FontSize', 10, ...
        'FontName', 'Calibri', ...
        'BackgroundColor',[.9 .9 .9]);
    
    fstepInput = uicontrol(panel_ftan, ...
        'Style', 'edit', ...
        'String', '1', ...
        'Units', 'Normalized', ...
        'Position', [0.59 0.27 0.05 0.5], ...
        'FontSize', ...
        10, 'FontName', ...
        'Calibri');
    
    
    times = 0;
 
    % button for compute FTAN analysis 
    btn_ftan = uicontrol(panel_ftan, ...
        'Style', 'pushbutton', ...
        'String', 'Compute FTAN', ...
        'Units', 'normalized', ...
        'Position', [0.68 0.15 0.3 0.85], ...
        'Callback', @(btn, event) ...
         FTAN_general(lag, nccf, fs, r, ...
                      str2double(get(sdiInput, 'string')), ...
                      str2double(get(sdfInput, 'string')), ...
                      str2double(get(fstepInput, 'string')), ...
                      start_frequency, end_frequency, ...
                      ub, lb, ax1, ax2, ax3, times, panel_group));


    % Button for save results in terms of dispersion curves (phase & group)
    btn_go = uicontrol(control_panel, ...
        'Style', 'pushbutton', ...
        'String', 'Save', ...
        'Units', 'normalized', ...
        'Position', [0.55 0.1 0.4 0.8], ...
        'Callback', @(btn_go, event) btn_continue(mainFig, btn_go));


    uiwait(mainFig);  % Blocca l'esecuzione                


%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    if mainFig.UserData.go
        
        % cycle to save outcomes base on panel 'SavePanel'
        out = false;
        SavePanel();
        while ~out
            if ~isCCF && ~isCoeh && ~isGroupEx && ~isGroupSy && ~isPhase
                uiwait(msgbox(' Choose at least one of the outputs ','Warning','modal'));
                SavePanel();
            else
                out = true;
            end
        end


%%  


        group_plot(isGroupEx, ...
                   ax1, ...
                   ax2, ...
                   ax3, ...
                   ENVEL_p, ...
                   ENVEL_n, ...
                   ENVEL_fold, ...
                   start_frequency, ...
                   end_frequency, ...
                   str2double(get(fstepInput,'string')), ...
                   vel);

%%              
        outputDir = Savefold();
        fig5 = [];
        OutputSave(ax,isPhase,isGroupEx,isGroupSy, ...
                   isCCF,isCoeh);


         choice05 = questdlg('Save Input parameters?', ...
                    'Save Settings', ...         
                    'Yes', 'No', 'No');    
         if strcmp(choice05, 'Yes')
             saveInput();
         end

         choice = questdlg('Try an other analysis ?', ...
                          'questlg','yes','no','no');

        if choice == "no"            
            analysis = false;
            uiwait(msgbox('Program completed', 'Info')); 
            close(mainFig);
            cd(home)
            break
        else
            delete(closeBtn); delete(winLabel); delete(winInput); 
            delete(stepLabel); delete(stepInput); delete(k1Label);
            delete(k1Input); delete(k2Label); delete(k2Input); 
            delete(btn_fit); delete(btn_auto); delete(btn_man);
            delete(sdiLabel); delete(sdiInput); delete(sdfLabel); 
            delete(sdfInput); delete(fstepLabel); delete(fstepInput);
            delete(btn_ftan); delete(btn_snt); delete(btn_go)
            cd(home)
        end
        
    end

elseif exist('nrec','var') && nrec > 2

    analysis = false;

    delete(axcoh)
    delete(axcor)
    delete(ax1)
    delete(ax2)
    delete(ax3)


    panel_phase.Position = [0.05, 0.38, 0.42, 0.54];
    panel_group.Position = [0.55, 0.38, 0.42, 0.54];
    panel_group.Title = ' Stations location ';
    
    axsta = uiaxes(panel_group,'Units','normalized','Position', [0.02 0.02 0.95 0.95]); 
    axsta.XLabel.String = 'x-direction (m)'; 
    axsta.YLabel.String = 'y-direction (m)'; 
    axsta.FontName = 'Calibri';
    axsta.FontSize = 12; 
    axsta.XGrid = 'on'; 
    axsta.YGrid = 'on'; 
    axsta.Box = 'on'; 
    scatter(axsta,xsta,ysta,75,'^','MarkerEdgeColor','k','MarkerFaceColor','k')    
    hold(axsta,'on')


    xrange = range(axsta.XLim);
    yrange = range(axsta.YLim);
    
    xOffset = 0.02 * xrange;  % 1% del range in X
    yOffset = 0.005 * yrange; % 0.5% del range in Y (se vuoi anche spostarlo in Y)

    % Stampa i nomi con offset proporzionale
    for i = 1:length(xsta)
        text(axsta, xsta(i) + xOffset, ysta(i) + yOffset, receiv{i}, ...
            'FontSize', 14, ...
            'FontName','Calibri', ...
            'HorizontalAlignment', 'left', ...
            'VerticalAlignment', 'middle');
    end
    
    % 1. Calcola min/max
    xmin = min(xsta);
    xmax = max(xsta);
    ymin = min(ysta);
    ymax = max(ysta);

    % 2. Calcola un margine proporzionale (es. 5% del range)
    xrange = xmax - xmin;
    yrange = ymax - ymin;
    
    marginX = 0.2 * xrange;
    marginY = 0.2 * yrange;
    
    % 3. Imposta limiti con margine
    
    if ymin - marginY == ymax + marginY
        axsta.YLim = [ymin-ymin/2 ymax+ymax/2];
    else
        axsta.YLim = [ymin - marginY, ymax + marginY];
    end
    
    if xmin - marginX == xmax + marginX
        axsta.XLim = [xmin-xmin/2 xmax+xmax/2];
    else
        axsta.XLim = [xmin - marginX, xmax + marginX];
    end

    clear xmin xmax ymin ymax xrange yrange marginX marginY 



%%

    % set paramters for phase dispersion analysis
    panel_set = uipanel(mainFig, ...
        'Title', 'Phase analysis parameters ', ...
        'Units', 'normalized', ...
        'Position', [0.05 0.25 0.42 0.12], ... 
        'BackgroundColor', [.9 .9 .9], ...
        'FontSize', 12, ...
        'FontName', 'Calibri', ...
        'BorderColor', [.95 .95 .95]); 


    % width of the frequency window
    winLabel = uicontrol(panel_set, ...
        'Style', 'text', ...
        'String', 'Window Width (Hz)', ...
        'Units', 'normalized', ...
        'Position', [0.05 0.4 0.2 0.2], ...
        'FontSize', 10, ...
        'FontName', 'Calibri', ...
        'BackgroundColor', [.9 .9 .9]);
    winInput = uicontrol(panel_set, ...
        'Style', 'edit', ...
        'String', '2', ...
        'Units', 'normalized', ...
        'Position', [0.25 0.39 0.08 0.25], ...
        'FontSize', 10, ...
        'FontName', 'Calibri');
    

    % frequency-step size of sequential frequency windows
    stepLabel = uicontrol(panel_set, ...
        'Style', 'text', ...
        'String', 'Step-size (Hz)', ...
        'Units', 'normalized', ...
        'Position', [0.35 0.4 0.17 0.2], ...
        'FontSize', 10, ...
        'FontName', 'Calibri', ...
        'BackgroundColor', [.9 .9 .9]);
    stepInput = uicontrol(panel_set, ...
        'Style', 'edit', ...
        'String', '2', ...
        'Units', 'normalized', ...
        'Position', [0.51 0.39 0.08 0.25], ...
        'FontSize', 10, ...
        'FontName', 'Calibri');
 

    % k1 linear coefficient for correlation
    k1Label = uicontrol(panel_set, ...
        'Style', 'text', ...
        'String', 'k1', ...
        'Units', 'normalized', ...
        'Position', [0.63 0.4 0.05 0.2], ...
        'FontSize', 10, ...
        'FontName', 'Calibri', ...
        'BackgroundColor', [.9 .9 .9]);
    k1Input = uicontrol(panel_set, ...
        'Style', 'edit', ...
        'String', '0.5', ...
        'Units', 'normalized', ...
        'Position', [0.68 0.39 0.08 0.25], ...
        'FontSize', 10, ...
        'FontName', 'Calibri');
    

    % k2 linear coefficient for rmse
    k2Label = uicontrol(panel_set, ...
        'Style', 'text', ...
        'String', 'k2', ...
        'Units', 'normalized', ...
        'Position', [0.81 0.4 0.05 0.2], ...
        'FontSize', 10, ...
        'FontName', 'Calibri', ...
        'BackgroundColor', [.9 .9 .9]);
    k2Input = uicontrol(panel_set, ...
        'Style', 'edit', ...
        'String', '0.5', ...
        'Units', 'normalized', ...
        'Position', [0.86 0.39 0.08 0.25], ...
        'FontSize', 10, ...
        'FontName', 'Calibri');
    
    
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    % set paramters for group dispersion analysis
    panel_set2 = uipanel(mainFig, ...
        'Title', 'Group analysis parameters ', ...
        'Units', 'normalized', ...
        'Position', [0.05 0.12 0.42 0.12], ... 
        'BackgroundColor', [.9 .9 .9], ...
        'FontSize', 12, ...
        'FontName', 'Calibri', ...
        'BorderColor', [.95 .95 .95]); 
    
    
    % Initial standard deviation of gaussian filter
    sdiLabel = uicontrol(panel_set2, ...
        'Style', 'text', ...
        'String', 'Initial sigma (Hz)', ...
        'Units', 'normalized', ...
        'Position', [0.05 0.4 0.2 0.2], ...
        'FontSize', 10, ...
        'FontName', 'Calibri', ...
        'BackgroundColor', [.90 .90 .90]);
    sdiInput = uicontrol(panel_set2, ...
        'Style', 'edit', ...
        'String', '1', ...
        'Units', 'normalized', ...
        'Position', [0.24 0.39 0.08 0.25], ...
        'FontSize', 10, ...
        'FontName', 'Calibri');
    

    % Initial standard deviation of gaussian filter
    sdfLabel = uicontrol(panel_set2, ...
        'Style', 'text', ...
        'String', 'Final sigma (Hz)', ...
        'Units', 'normalized', ...
        'Position', [0.38 0.4 0.2 0.2], ...
        'FontSize', 10, ...
        'FontName', 'Calibri', ...
        'BackgroundColor', [.90 .90 .90]);
    sdfInput = uicontrol(panel_set2, ...
        'Style', 'edit', ...
        'String', '5', ...
        'Units', 'normalized', ...
        'Position', [0.57 0.39 0.08 0.25], ...
        'FontSize', 10, ...
        'FontName', 'Calibri');
    
    % frequency step of the filter
    fstepLabel = uicontrol(panel_set2, ...
        'Style', 'text', ...
        'String', 'Step (Hz)', ...
        'Units', 'normalized', ...
        'Position', [0.73 0.4 0.1 0.2], ...
        'FontSize', 10, ...
        'FontName', 'Calibri', ...
        'BackgroundColor', [.90 .90 .90]);
    fstepInput = uicontrol(panel_set2, ...
        'Style', 'edit', ...
        'String', '1', ...
        'Units','normalized', ...
        'Position', [0.84 0.39 0.08 0.25], ...
        'FontSize', 10, ...
        'FontName', 'Calibri');
    
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    
    % set frequency and velocity ranges of the dispersion analysis
    panel_fv = uipanel(mainFig, ...
        'Title', 'Frequency - Velocity limits ', ...
        'Units', 'normalized', ...
        'Position', [0.55 0.12 0.16 0.25], ... 
        'BackgroundColor', [.9 .9 .9], ...
        'FontSize', 12, ...
        'FontName', 'Calibri', ...
        'BorderColor', [.95 .95 .95]); 
    

    % starting frequency
    fiLabel = uicontrol(panel_fv, ...
        'Style', 'text', ...
        'String', 'Start frequency (Hz)', ...
        'Units', 'Normalized', ...
        'Position', [0.1 0.6 0.5 0.2], ...
        'FontSize', 10, ...
        'FontName', 'Calibri', ...
        'BackgroundColor', [.90 .90 .90]);
    fiInput = uicontrol(panel_fv, ...
        'Style', 'edit', ...
        'String', '0', ...
        'Units', 'Normalized', ...
        'Position', [0.7 0.7 0.18 0.12], ...
        'FontSize', 10, ...
        'FontName', 'Calibri');
    
    
    % final frequency
    ffLabel = uicontrol(panel_fv, ...
        'Style', 'text', ...
        'String', 'End Frequency (Hz)', ...
        'Units', 'Normalized', ...
        'Position', [0.1 0.4 0.5 0.2], ...
        'FontSize', 10, ...
        'FontName', 'Calibri', ...
        'BackgroundColor', [.90 .90 .90]);
    ffInput = uicontrol(panel_fv, ...
        'Style', 'edit', ...
        'String', '25', ...
        'Units', 'Normalized', ...
        'Position', [0.7 0.5 0.18 0.12], ...
        'FontSize', 10, ...
        'FontName', 'Calibri');
    
    % starting velocity
    viLabel = uicontrol(panel_fv, ...
        'Style', 'text', ...
        'String', 'Start Velocity (m/s)', ...
        'Units', 'Normalized', ...
        'Position', [0.1 0.2 0.5 0.2], ...
        'FontSize', 10, ...
        'FontName', 'Calibri', ...
        'BackgroundColor', [.90 .90 .90]);
    viInput = uicontrol(panel_fv, ...
        'Style', 'edit', ...
        'String', '50', ...
        'Units', 'Normalized', ...
        'Position', [0.7 0.3 0.18 0.12], ...
        'FontSize', 10, ...
        'FontName', 'Calibri');
    
    
    % final velocity
    vfLabel = uicontrol(panel_fv, ...
        'Style', 'text', ...
        'String', 'End Velocity (m/s)', ...
        'Units', 'Normalized', ...
        'Position', [0.1 0.0 0.5 0.2], ...
        'FontSize', 10, ...
        'FontName', 'Calibri', ...
        'BackgroundColor', [.90 .90 .90]);
    vfInput = uicontrol(panel_fv, ...
        'Style', 'edit', ...
        'String', '500', ...
        'Units', 'Normalized', ...
        'Position', [0.7 0.1 0.18 0.12], ...
        'FontSize', 10, ...
        'FontName', 'Calibri');
    
    % button for start dispersion analysis for 3 or more stations
    btn_start = uicontrol(mainFig, ...
        'Style', 'pushbutton', ...
        'String', 'START Dispersion Analysis', ...
        'Units','Normalized', ...
        'Position', [0.76 0.2 0.16 0.08], ...
        'FontName', 'Calibri', ...
        'FontSize', 12,  ... 
        'BackgroundColor', [0 0.4470 0.7410], ... 
        'ForegroundColor', [1 1 1], ...               
        'Callback', @(btn_start, event) btn_continue(mainFig, btn_start));
    
    
   
    
    progressPanel = uipanel(mainFig, ...
        'Units', 'normalized', ...
        'Position', [0.14, 0.03, 0.33, 0.05], ... % in basso, larga il 90%
        'BackgroundColor', [.9 .9 .9], ...
        'BorderType', 'line', ...
        'BorderColor','k');
    
    progressBar = uipanel(progressPanel, ...
        'Units', 'normalized', ...
        'Position', [0, 0, 0, 1], ... % inizia vuota
        'BackgroundColor', [0.2 0.6 0.8], ...
        'BorderType', 'none');
    

    npair = (length(idx)*(length(idx)-1))/2;
    step = ['Step 0/',num2str(npair)];

    progressText = uicontrol(mainFig, ...
        'Style', 'text', ...
        'Units', 'normalized', ...
        'Position', [0.2, 0.085, 0.2, 0.02], ...
        'String', step, ...
        'BackgroundColor', [.95 .95 .95], ...
        'FontSize', 10);

     
    uiwait(mainFig);  % Blocca l'esecuzione          



    SavePanel();
    
        choice05 = questdlg('Save Input parameters?', ...
                    'Save Settings', ...         
                    'Yes', 'No', 'No');    
    if strcmp(choice05, "Yes")
        svIn = true;
    else
        svIn = false;
    end

    outputDir = Savefold();
    w = round(w*fs);
    dt = 1/fs; % sampling time
    N = w+1;
    T = dt*N;
    df = 1/T;

    vel = str2double(get(viInput,'string')):str2double(get(vfInput,'string'));
    fi = str2double(get(fiInput,'string'));
    ff  = str2double(get(ffInput,'string'));
    lb = str2double(get(viInput,'string'));
    ub = str2double(get(vfInput,'string'));



    jj = 0;

    for ns1 = 1:length(idx)-1

        for ns2 = ns1+1:length(idx)

            jj = jj +1;
            n1 = idx(ns1);
            n2 = idx(ns2);
            
            r = sqrt( (xsta(ns1)-xsta(ns2))^2 + (ysta(ns1)-ysta(ns2))^2 );

            l = line(axsta,[xsta(ns1) xsta(ns2)],[ysta(ns1) ysta(ns2)]);
            l.LineStyle = '--';
            l.LineWidth = .75;
            l.Color = [.3 .3 .3];
            uistack(l, 'bottom'); 
            panel_phase.Title = ['Picked Dispersion Curves  ',receiv{ns1},' - ',receiv{ns2}];
            
            pause(5)

            % extract green's function from ensamble CCF
            [lag, nccf] = crosscorr_2(sig(:,ns1), ...
                                      sig(:,ns2), ...
                                      ti_win, ...
                                      tf_win, ...
                                      fs, ...
                                      w, ...
                                      idx);


            [freq,corr] = coherence_2(sig(:,ns1), ...
                                      sig(:,ns2), ...
                                      ti_win, ...
                                      tf_win, ...
                                      fs, ...
                                      w, ...
                                      str2double(get(ffInput,'string')), ...
                                      idx);


            [ff1,corr_space] = space_corr_win(corr, ...
                                              freq, ...
                                              str2double(get(viInput,'string')):str2double(get(vfInput,'string')), ...
                                              str2double(get(fiInput,'string')), ...
                                              str2double(get(ffInput,'string')), ...
                                              df, ... 
                                              str2double(get(stepInput,'string')), ...
                                              r, ...
                                              str2double(get(winInput,'string')), ...
                                              str2double(get(k1Input,'string')), ...
                                              str2double(get(k2Input,'string')));    
            


            [fr,c,cm,cp] = auto_pick_multi(ax, ...
                                           ff1, ...
                                           str2double(get(viInput,'string')):str2double(get(vfInput,'string')), ...
                                           corr_space, ...
                                           str2double(get(fiInput,'string')), ...
                                           str2double(get(ffInput,'string')));


     
            [f_snt,vg_snt] = get_Vg(fr,c);

            hold(ax,'on')
            if ~isfield(mainFig.UserData, 'legendHandles')
                mainFig.UserData.legendHandles = []; % Per salvare gli handle delle curve
                mainFig.UserData.legendTexts = {};   % Per salvare i nomi delle curve
            end
            mainFig.UserData.p2 = plot(ax, fr, c, '.-'); 
            mainFig.UserData.legendHandles = [mainFig.UserData.legendHandles,mainFig.UserData.p2]; % Aggiunge handle
            mainFig.UserData.legendTexts = [mainFig.UserData.legendTexts, sprintf('%s-%s', receiv{ns1}, receiv{ns2})]; % Aggiunge il nome
            lgd = legend(ax, mainFig.UserData.legendHandles, mainFig.UserData.legendTexts);
            lgd.Visible = 'off';
            hold(ax, 'off');

            pause(3)

            applyDataTip(mainFig.UserData.p2, [receiv{ns1},'-',receiv{ns2}]);

            if isGroupEx
            ffilt = str2double(get(fiInput,'string')):str2double(get(fstepInput,'string')):str2double(get(ffInput,'string'));
            [ENVEL_n,ENVEL_p,ffilt,v] = FTAN(ffilt,lag,nccf,fs,r,str2double(get(sdiInput,'string')),str2double(get(sdfInput,'string')));
            ENVEL_fold = FTAN_fold(ffilt,lag,nccf,fs,r,str2double(get(sdiInput,'string')),str2double(get(sdfInput,'string')));  
            
            [fgr,vgr1] = auto_pickGr(ENVEL_p',ffilt,v);
            [~,vgr2] = auto_pickGr(ENVEL_n',ffilt,v);
            [~,vgr3] = auto_pickGr(ENVEL_fold',ffilt,v);
            
            % check over Group velcoity derived from causal, acausal and
            % folded CCF
            minl = min([length(vgr1) length(vg_snt)]);
            vrms(1) = sum((vg_snt(1:minl)-vgr1(1:minl)').^2);
            vrms(2) = sum((vg_snt(1:minl)-vgr2(1:minl)').^2);
            vrms(3) = sum((vg_snt(1:minl)-vgr3(1:minl)').^2);

            [~,loc] = min(vrms);
            
            if loc == 1
                vgr = vgr1; ENVEL = ENVEL_p';
            elseif loc == 2
                vgr = vgr2; ENVEL = ENVEL_n';
            elseif loc == 3
               vgr = vgr3; ENVEL = ENVEL_fold';
            end
                            
            for k = 1:length(fgr)
                [~,locf] = min(abs(ffilt-fgr(k)));
                [~,locv] = min(abs(v-vgr(k)));
                [vgrm(1,k),vgrp(1,k)] = error_v(v,ENVEL(:,locf),locv,'auto');
            end
            
            fgr_i(:,1) = ceil(fgr(1)*2)/2 : 0.5 : floor(fgr(end));
            vgr_i(:,1) = interp1(fgr, vgr, fgr_i, 'linear');
            vgrm_i(:,1) = interp1(fgr, vgrm, fgr_i, 'linear');
            vgrp_i(:,1) = interp1(fgr, vgrp, fgr_i, 'linear');

            fgr = fgr_i; vgr = vgr_i; vgrm = vgrm_i; vgrp = vgrp_i;
            clear vgr_i fgr_i vgrm_i vgrp_i



            end

            if ~isGroupSy    
                f_snt = [];
                vg_snt = [];
            end



            OutputSave(ax,isPhase, isGroupEx, isGroupSy,isCCF, isCoeh);

            if svIn
            saveInput();
            end

            if exist('l','var')
                delete(l)
            end

            progress(npair, jj, progressBar,progressText);

            clear D_curve f phase lag nccf freq corr dev ff1 corr_space ...
                  fig2 fr c cm cp f_snt vg_snt ENVEL_n ENVEL_p ...
                  ENVEL_fold fgr vgr vgr1 vgr2  vgr3 vrms vgrm vgrp ENVEL ...
                  locf mainFig.UserData.p2 ENVEL ffilt 

        end
    end

cd(home)
uiwait(msgbox('Program completed', 'Info')); 
close(mainFig);

end



end



end